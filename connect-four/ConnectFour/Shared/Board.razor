@inject ConnectFour.Shared.GameState State

<HeadContent>
  <style>
    :root {
      --board-bg: yellow;
      --player1: blue;
      --player2: red;
    }
  </style>
</HeadContent>

<nav>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(0))">ğŸ”½</span>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(1))">ğŸ”½</span>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(2))">ğŸ”½</span>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(3))">ğŸ”½</span>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(4))">ğŸ”½</span>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(5))">ğŸ”½</span>
  <span title="Click to play a piece" @onclick="@(() => PlayPiece(6))">ğŸ”½</span>
</nav>

<article>
  @WinnerMessage <button type="button" style="@ResetStyle" @onclick="ResetGame">Reset the game</button><br>
  <span class="alert-danger">@ErrorMessage</span>
  <span class="alert-info">@CurrentTurn</span>
</article>

<div>
  <div class="board">
    @for (var i = 0; i < 42; i++)
    {
      <span class="container">
        <span></span>
      </span>
    }
  </div>
    @for (var i = 0; i < 42; i++)
    {
      <span class="@Pieces[i]"></span>
    }
</div>

@code {
  private string[] Pieces = new string[42];

  private string WinnerMessage = string.Empty;

  private string ErrorMessage = string.Empty;

  private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : string.Empty;

  private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : string.Empty;

  protected override void OnInitialized() => State.ResetBoard();

  private void PlayPiece(byte col)
  {
    ErrorMessage = string.Empty;
    try
    {
      var landingRow = State.PlayPiece(col);
      var cssClass = $"player{State.PlayerTurn} col{col+1} drop{landingRow}";
      Pieces[State.CurrentTurn - 1] = cssClass;
    }
    catch (Exception ex)
    {
      ErrorMessage = ex.Message;
    }

    WinnerMessage = State.CheckForWin() switch
    {
      GameState.WinState.Player1_Wins => "Player 1 Wins!",
      GameState.WinState.Player2_Wins => "Player 2 Wins!",
      GameState.WinState.Tie => "It's a tie!",
      _ => string.Empty
    };
  }

  public void ResetGame()
  {
    State.ResetBoard();
    WinnerMessage = string.Empty;
    ErrorMessage = string.Empty;
    Pieces = new string[42];
  }
} 
